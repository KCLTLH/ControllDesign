close all, clear all% Drive motor and drive motor amplifier parametersK1 = 99e-3;     % Motor constant (V/(rad/sec))R1 = 2.13;      % Armature resistance (ohms)Dm1 = 1.27e-4;  % Motor damping constant (N*m/(rad/sec))L1 = 0.686e-3;  % Armature inductance (H)Jm1 = 26.9e-6;  % Motor inertia (kg*m^2)Ka1 = 32.2;     % Gain of amplifier gain for drive motor (V/V)Ra1 = 0.2;      % Resistance of amplifier for drive motor (ohms)% Load motor and load motor amplifier parametersK2 = 62e-3;     % Motor constant (V/(rad/sec))R2 = 1.2;       % Armature resistance (ohms)Dm2 = 60e-6;    % Motor damping constant (N*m/(rad/sec))L2 = 2.1e-3;    % Armature inductance (H)Jm2 = 24.38e-6; % Motor inertia (kg*m^2)Ka2 = 32.2;     % Amplifier gain for drive motor (V/V)Ra2 = 0.2;      % Amplifier resistance for drive motor (ohms)% Other parametersJ1 = 1.25e-3;   % Inertial load on theta1 shaft (kg*m^2)J2 = 1.0e-3;    % Inertial load on theta2 shaft (kg*m^2)D1 = 42.35e-6;  % Viscous friction coefficient for theta1 shaft(N*m/(rad/sec))D2 = 42.35e-6;  % Viscous friction coefficient for theta2 shaft (N*m/(rad/sec))n = 5.0;        % Gear ratioKs = 100;       % Shaft stiffness (N*m/rad)% Generate State Model MatricesJeq1 = J1 + n^2*Jm1;Jeq2 = J2 + Jm2;Deq1 = D1 + n^2*Dm1;Deq2 = D2 + Dm2;a11 = -(Ra1+R1)/L1;a14 = -n*K1/L1;a22 = -(Ra2 + R2)/L2;a26 = -K2/L2;a41 = n*K1/Jeq1;a43 = -Ks/Jeq1;a44 = -Deq1/Jeq1;a45 = Ks/Jeq1;a62 = K2/Jeq2;a63 = Ks/Jeq2;a65 = -Ks/Jeq2;a66 = -Deq2/Jeq2;b11 = Ka1/L1;b22 = Ka2/L2;A = [a11       0        0      a14       0        0       0     a22        0        0       0      a26       0       0        0        1       0        0     a41       0      a43      a44     a45        0       0       0        0        0       0        1       0     a62      a63        0     a65      a66];B = [b11     0       0   b22       0     0       0     0       0     0       0     0];C = [0 0 1 0 0 0    0 0 0 0 1 0];D = [0 0    0 0];%% Create Discrete PlantTs = 0.02;plantcont = ss(A,B,C,D);plant_dis =c2d(plantcont,Ts);%% Lead - LagKlead = .55;leadzero = 0.46415;leadpole = 0.2;Klag = 1;lagzero = 0.991;lagpole = 1;leadlag = tf(Klead*[1 -leadzero],[1 -leadpole],Ts)*tf(Klag*[1 -lagzero],[1 -lagpole],Ts);% Define loop transfer functionloop=plant_dis(2,1)*leadlag;omega=logspace(log10(1),log10(0.9999*pi/Ts),501)';figure('Name', 'BODE PLOT')bode(loop,omega)bode(loop,omega);grid on %%[Gm,Pm,Wcg,Wcp] = margin(loop);simflg=inptdf('\nEnter 1 for Simulink simulation with destabilizing sensor gain [1]',1);if simflg    sensor_delay=0;     disp(' ')  disp('Theory predicts that a theta2-sensor gain increase equal to the gain margin')  disp(' will destabilize the closed-loop system.')  disp(' ')  disp('Below you will be asked to enter a sensortheta2ref gain for the simulation.')  disp('The supplied default value will be the gain margin.')  disp('Or enter 1 to see the nominal response.')    sensor_gain=Gm;  gaintxt=sprintf('%-10.5e',sensor_gain);  sensor_gain=inptdf(['\nEnter theta2 sensor gain (dimensionless) [' gaintxt ']'],sensor_gain);    tfinal=inptdf('\nEnter final time for Simulink simulation (sec) [1]',1);  maxstep=tfinal/4000;  % max step size for the Simulink simulation  theta2ref=1; % Unit step theta2ref input    simout1=sim('MINE','Solver','ode45','RelTol','1.e-5', ...             'MaxStep','maxstep','StopTime','tfinal',...             'SaveTime','on','TimeSaveName','t_sim', ...             'SaveOutput','on','OutputSaveName','y_sim');  time=simout1.get('t_sim');  y=simout1.get('y_sim');    figure  plot(time,y(:,1),'b-',time,y(:,2),'r')  xlabel('t (sec)')  ylabel('\theta_1(t) and \theta_2(t) (rad)')  title(['Response to \theta_{2ref} Step with \theta_2 Sensor Gain=' gaintxt]);  legend('\theta_1','\theta_2','Location','SouthEast')  end%%lag_time = (Pm*pi/180)/21.7;% Simulink simulation with time delaysimflg=inptdf('\nEnter 1 for Simulink simulation with theta2 sensor time delay [1]',1);if simflg      sensor_gain=1;      disp(' ')  disp('Theory predicts that a theta2-sensor delay time equal to the phase')  disp(' margin (in radians) divided by the frequency (in rad/sec) where the')  disp(' phase margin occurs will destabilize the closed-loop system.')  disp(' ')  disp('Below you will be asked to enter a theta2-sensor delay time for the')  disp(' simulation.  The supplied default value will be the theory-predicted')  disp(' destabilizing value.  Or enter 0 to see the nominal response.')  sensor_delay=(Pm*pi/180)/Wcp;  delaytxt=sprintf('%-10.5e sec',sensor_delay);  sensor_delay=inptdf(['\nEnter theta2 sensor delay time (sec) [' delaytxt ']'],sensor_delay);    tfinal=inptdf('\nEnter final time for Simulink simulation (sec) [1]',1);  maxstep=tfinal/4000;  % max step size for the Simulink simulation  theta2ref=1; % Unit step theta2ref input   simout1=sim('MINE','Solver','ode45','RelTol','1.e-5', ...             'MaxStep','maxstep','StopTime','tfinal',...             'SaveTime','on','TimeSaveName','t_sim', ...             'SaveOutput','on','OutputSaveName','y_sim');  time=simout1.get('t_sim');  y=simout1.get('y_sim');    figure  plot(time,y(:,1),'b-',time,y(:,2),'r')  xlabel('t (sec)')  ylabel('\theta_1(t) and \theta_2(t) (rad)')  title(['Response to \theta_{2ref} Step with \theta_2 Sensor Delay=' delaytxt]);  legend('\theta_1','\theta_2','Location','SouthEast')  end